<?php

namespace  Modules\Warehouse\Repositories\Eloquent\Product;

use App\Repositories\Eloquent\BaseRepository;
use  Modules\Warehouse\Entities\Api\Product\ProductCategory;
use Modules\Warehouse\Repositories\IRepositories\Product\IProductCategoryRepository;

class ProductCategoryRepository extends BaseRepository implements IProductCategoryRepository
{
    public function model()
    {
        return ProductCategory::class;
    }

    public function getParents()
    {
        return ProductCategory::parents();
    }

    public function codeGenerator($key = null, $value = null)
    {
        $code = $this->model->when(isset($value), function ($query) use ($key, $value) {
            return $query->where($key, $value);
        })->orderBy('id', 'desc')->pluck('code')->first();
        $nextCode = getAutoGeneratedNextCode($code);
        $newCode = $this->model->when(isset($value), function ($query) use ($key, $value) {
            return $query->where($key, $value);
        })->where('code', $nextCode)->pluck('code')->first();
        while ($newCode != null) {
            $nextCode = getAutoGeneratedNextCode($newCode);
            $newCode = $this->model->when(isset($value), function ($query) use ($key, $value) {
                return $query->where($key, $value);
            })->where('code', $nextCode)->pluck('code')->first();
        }
        return $nextCode;
    }

    public function namesWithTypeIsFixedAsset()
    {
        $models =  $this->model->select(['id', 'name', 'is_active'])->where('product_type', 4)->orderByRaw("FIELD(is_active,1) DESC")->get();
        return $models;
    }

    public function namesWithType($type)
    {
        $models = $this->model->select(['id', 'name', 'is_active'])->where('product_type', $type)->orderByRaw("FIELD(is_active,1) DESC")->get();
        return $models;
    }



    public function getdata()
    {
        $models =  $this->model->select(['id', 'name', 'parent_id', 'is_active'])->with('products', 'children')->get();
        return $models;
    }
}
