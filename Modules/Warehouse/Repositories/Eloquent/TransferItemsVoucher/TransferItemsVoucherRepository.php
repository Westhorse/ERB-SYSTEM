<?php

namespace  Modules\Warehouse\Repositories\Eloquent\TransferItemsVoucher;

use App\Repositories\Eloquent\BaseRepository;
use Modules\Warehouse\Repositories\IRepositories\TransferItemsVoucher\ITransferItemsVoucherRepository;
use Carbon\Carbon;
use Exception;
use Illuminate\Support\Facades\DB;
use  Modules\Warehouse\Entities\Api\TransferItemsVoucher\TransferItemsVoucher;

class TransferItemsVoucherRepository extends BaseRepository implements ITransferItemsVoucherRepository
{
    public function model()
    {
        return TransferItemsVoucher::class;
    }


    public function billCodeGenerator($key = null, $value = null)
    {
        $code = DB::table('c_bills')->when(isset($value), function ($query) use ($key, $value) {
            return $query->where($key, $value);
        })->orderBy('id', 'desc')->pluck('code')->first();
        $nextCode = getAutoGeneratedNextCode($code);
        $newCode =  DB::table('c_bills')->when(isset($value), function ($query) use ($key, $value) {
            return $query->where($key, $value);
        })->where('code', $nextCode)->pluck('code')->first();
        while ($newCode != null) {
            $nextCode = getAutoGeneratedNextCode($newCode);
            $newCode =  DB::table('c_bills')->when(isset($value), function ($query) use ($key, $value) {
                return $query->where($key, $value);
            })->where('code', $nextCode)->pluck('code')->first();
        }
        return $nextCode;
    }


    public function itemsStore($bill, $items, $warehouse, $type)
    {
        foreach ($items as $item) {
            DB::table('c_bills_items')->insert([
                'bill_id' => $bill,
                'warehouse_id' =>  $warehouse,
                'product_id' => $item['product_id'],
                'unit_id' => $item['unit_id'],
                $type . '_qty' => $item['product_qty'],
                'converted_' . $type . '_qty' => $item['converted_product_qty'],
                'created_at' => Carbon::now(),
            ]);
        }
    }
    public function itemsUpdate($bill, $items, $warehouse, $type)
    {
        DB::table('c_bills_items')->where('bill_id', $bill)->update(['deleted_at' => Carbon::now()]);
        $this->itemsStore($bill, $items, $warehouse, $type);
    }
    public function billStore($payload)
    {
        return  DB::table('c_bills')->insertGetId($payload);
    }
    public function detailsStore($installment, $details)
    {
        foreach ($details as $detail) {
            $installment->details()->create([
                'product_id' => $detail['product_id'],
                'unit_id' => $detail['unit_id'],
                'product_qty' => $detail['product_qty'],
                'converted_product_qty' => $detail['converted_product_qty'],
                'cost_price' => $detail['cost_price'],
                'created_at' => Carbon::now(),
            ]);
        }
    }

    public function createRequest($request)
    {
        try {
            DB::beginTransaction();
            $payload = [
                'voucher_date' => $request['voucher_date'],
                'ref_bill_type_id' => $request['ref_bill_type_id'],
                'ref_bill_id' => $request['ref_bill_id'],
                'src_warehouse_id' => $request['src_warehouse_id'],
                'dest_warehouse_id' => $request['dest_warehouse_id'],
                'currency_id' => $request['currency_id'],
                'conversion_rate' => $request['conversion_rate'],
                'src_branch_id' => $request['src_branch_id'],
                'dest_branch_id' => $request['dest_branch_id'],
                'in_bill_type_id' => $request['in_bill_type_id'],
                'out_bill_type_id' => $request['out_bill_type_id'],
                'deliverer_id' => $request['deliverer_id'],
                'receiver_id' => $request['receiver_id'],
                'input_cost_center_id'  => $request['input_cost_center_id'],
                'output_cost_center_id' => $request['output_cost_center_id'],
                'remarks' => $request['remarks'],
            ];

            $transferVoucher = $this->model->create($payload);

            if (!empty($request['details'])) {
                $this->detailsStore($transferVoucher, $request['details']);
            }

            //TODO: Service or modularity 
            $outBillPayload = [
                'code' => $this->billCodeGenerator(),
                'transfer_id' => $transferVoucher['id'],
                'branch_business_id' => $request['branch_business_id'],
                'bill_date' => $request['voucher_date'],
                'warehouse_id' => $request['src_warehouse_id'],
                'cost_center_id' => $request['output_cost_center_id'],
                'currency_id' => $request['currency_id'],
                'payment_account_id ' => $request['out_account_id'],
                'conversion_factor' => $request['conversion_rate'],
                'bill_type_id' => $request["out_bill_type_id"],
                'created_at' => Carbon::now(),
            ];
            $outBill =  $this->billStore($outBillPayload);

            $this->itemsStore($outBill, $request['details'], $request['src_warehouse_id'], 'issue');
            $inBillPaylod = [
                'code' => $this->billCodeGenerator(),
                'transfer_id' => $transferVoucher['id'],
                'branch_business_id' => $request['branch_business_id'],
                'bill_date' => $request['voucher_date'],
                'warehouse_id' => $request['dest_warehouse_id'],
                'cost_center_id' => $request['input_cost_center_id'],
                'currency_id' => $request['currency_id'],
                'payment_account_id ' => $request['in_account_id'],
                'conversion_factor' => $request['conversion_rate'],
                'bill_type_id' => $request["in_bill_type_id"],
                'created_at' => Carbon::now(),
            ];

            $inBill = $this->billStore($inBillPaylod);
            $this->itemsStore($inBill, $request['details'], $request['dest_warehouse_id'], 'add');

            DB::commit();
            return $transferVoucher;
        } catch (Exception $e) {
            DB::rollback();
            throw $e;
        }
    }
    public function updateRequest($transferVoucher, $request)
    {
        try {
            DB::beginTransaction();
            $transferVoucher->update([
                'voucher_date' => $request['voucher_date'],
                'ref_bill_type_id' => $request['ref_bill_type_id'],
                'ref_bill_id' => $request['ref_bill_id'],
                'src_warehouse_id' => $request['src_warehouse_id'],
                'dest_warehouse_id' => $request['dest_warehouse_id'],
                'currency_id' => $request['currency_id'],
                'conversion_rate' => $request['conversion_rate'],
                'src_branch_id' => $request['src_branch_id'],
                'dest_branch_id' => $request['dest_branch_id'],
                'in_bill_type_id' => $request['in_bill_type_id'],
                'out_bill_type_id' => $request['out_bill_type_id'],
                'deliverer_id' => $request['deliverer_id'],
                'receiver_id' => $request['receiver_id'],
                'input_cost_center_id'  => $request['input_cost_center_id'],
                'output_cost_center_id' => $request['output_cost_center_id'],
                'remarks' => $request['remarks'],
            ]);

            if (!empty($request['details'])) {
                $transferVoucher->details()->delete();
                $this->detailsStore($transferVoucher, $request['details']);
            }

            //TODO: Service or modularity 
            DB::table('c_bills')->where('id', $request['out_bill'])->update([
                'transfer_id' => $transferVoucher['id'],
                'branch_business_id' => $request['branch_business_id'],
                'bill_date' => $request['voucher_date'],
                'warehouse_id' => $request['src_warehouse_id'],
                'cost_center_id' => $request['output_cost_center_id'],
                'payment_account_id ' => $request['out_account_id'],
                'currency_id' => $request['currency_id'],
                'conversion_factor' => $request['conversion_rate'],
                'bill_type_id' => $request["out_bill_type_id"],
                'updated_at' => Carbon::now(),
            ]);

            $this->itemsUpdate($request['out_bill'], $request['details'], $request['src_warehouse_id'], 'issue');

            DB::table('c_bills')->where('id', $request['in_bill'])->update([
                'transfer_id' => $transferVoucher['id'],
                'branch_business_id' => $request['branch_business_id'],
                'bill_date' => $request['voucher_date'],
                'warehouse_id' => $request['dest_warehouse_id'],
                'cost_center_id' => $request['input_cost_center_id'],
                'payment_account_id ' => $request['in_account_id'],
                'currency_id' => $request['currency_id'],
                'conversion_factor' => $request['conversion_rate'],
                'bill_type_id' => $request["in_bill_type_id"],
                'updated_at' => Carbon::now(),
            ]);

            $this->itemsUpdate($request['in_bill'], $request['details'], $request['dest_warehouse_id'], 'add');

            DB::commit();
            return true;
        } catch (Exception $e) {
            DB::rollback();
            throw $e;
        }
    }
}
